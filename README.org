* Bark - A R7RS Testing System

Bark is an incredibly small, simple testing framework for R7RS scheme. It is a single file (=main.scm=), and creates a library which exposes basic test creation and management facilities. 

* Contents
** Assertions: =is= and =isnt=

Bark has two forms for checking runtime assertions, =is= and =isnt=:
- The form =(is F1 F2 ...)= checks that the forms =F1=, =F2=, ... all evaluate to values which aren't =#f=
- The form =(isnt F1 F2 ...)= checks that the forms =F1=, =F2=, ... all evaluate to =#f=

** Errors: =fail-test=

Bark reports errors using the =fail-test= procedure, which reports the following as irritants:
- The initial form evaluated
- The initial form with its arguments evaluated (optional, only used when =is= or =isnt= are run on an application)
- The result of the evaluation

** Test Definition: =test=

Tests are defined using the =test= form, which is of the following form:

#+begin_src scheme
(test test-factorial-procedure
      (is (= (factorial 0) 1))
          (= (factorial 3) 6)
          (= (factorial 9) (* 9 8 7 6 5 4 3 2 1)))
#+end_src

This defines the zero-argument procedure =test-factorial-procedure=, which runs its body when the procedure is invoked. Tests can also be nested to form suites, such as this example:

#+begin_src scheme
(test test-large-system
      (define system (allocate-large-system))
      (test initialization
            (is system)
            (initialize-system! system)
            (is (system-initialized? system)))
      (test usage
            (is (valid-result? (use-system system))))
      (test de-initialization
            (free-system! system)
            (isnt system))
      (run-tests!))
#+end_src

Running the outer test, =test-large-system=, will run each of the inner tests, in order that they are defined.

** Test Running: =run-tests= and =*all-tests*=

Tests can be run in groups using either =run-tests!= or =*all-tests*=. The former is a function which, when invoked, runs all of the tests in the order they were defined. The latter is a parameter which holds all of the tests defined in the current scope (if inside of a suite, this will be only the tests defined inside that suite), in the reverse of the order they were defined.
